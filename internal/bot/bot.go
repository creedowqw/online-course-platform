package bot

import (
	"encoding/json"
	"fmt"
	"github.com/joho/godotenv"
	"log"
	"math/rand"
	"net/http"
	"net/smtp"
	"online-course-platform/internal/db"
	"online-course-platform/internal/integrations"
	"online-course-platform/internal/models"
	"os"
	"regexp"
	"strings"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

type session struct {
	UserID uint
	Role   string
}

var (
	sessions       = make(map[int64]session)
	sessionsMutex  = sync.RWMutex{}
	authCodes      = make(map[string]string) // email -> code
	authEmailState = make(map[int64]string)  // chatID -> email
)

func StartBot() {
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if botToken == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN is not set")
	}

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:", err)
	}

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates, _ := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}
		chatID := update.Message.Chat.ID
		text := strings.TrimSpace(update.Message.Text)

		if text == "admin123" {
			sessionsMutex.Lock()
			sessions[chatID] = session{UserID: 1, Role: "admin"}
			sessionsMutex.Unlock()
			showMenuByRole(bot, chatID, "admin", "admin")
			continue
		}

		sessionsMutex.RLock()
		sess, loggedIn := sessions[chatID]
		sessionsMutex.RUnlock()

		if !loggedIn {
			switch {
			case strings.ToLower(text) == "/start":
				bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É (@narxoz.kz):"))
			case strings.HasSuffix(text, "@narxoz.kz"):
				code := fmt.Sprintf("%06d", rand.Intn(1000000))
				authCodes[text] = code
				authEmailState[chatID] = text
				sendEmail(text, code)
				log.Printf(" –ö–æ–¥ %s –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É: %s\n", code, text)
				bot.Send(tgbotapi.NewMessage(chatID, "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ:"))
			case len(text) == 6 && regexp.MustCompile(`^\d{6}$`).MatchString(text):
				email := authEmailState[chatID]
				if email != "" && authCodes[email] == text {
					user := registerOrGetUser(email)
					sessionsMutex.Lock()
					sessions[chatID] = session{UserID: user.ID, Role: user.Role}
					sessionsMutex.Unlock()
					delete(authCodes, email)
					delete(authEmailState, chatID)
					showMenuByRole(bot, chatID, user.Name, user.Role)
				} else {
					bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:"))
				}
			default:
				bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."))
			}
			continue
		}

		switch strings.ToLower(text) {
		case "–≤—ã—Ö–æ–¥":
			sessionsMutex.Lock()
			delete(sessions, chatID)
			sessionsMutex.Unlock()
			bot.Send(tgbotapi.NewMessage(chatID, "–í—ã –≤—ã—à–ª–∏. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞."))
		case "–∫—É—Ä—Å—ã":
			bot.Send(tgbotapi.NewMessage(chatID, fetchCourses()))
		case "—Å–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å":
			if sess.Role == "admin" || sess.Role == "teacher" {
				bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:"))
				// –¥–∞–ª—å—à–µ –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."))
			}
		case "–≤—ã–¥–∞—Ç—å —Ä–æ–ª—å":
			if sess.Role == "admin" {
				bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–≤—É—é —Ä–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: john teacher):"))
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."))
			}

		case "–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ canvas":
			if sess.Role == "admin" {
				msg := canvas.ImportCanvasCoursesToDB()
				bot.Send(tgbotapi.NewMessage(chatID, msg))
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"))
			}

		default:
			if sess.Role == "admin" && strings.Count(text, " ") == 1 {
				parts := strings.Split(text, " ")
				username := parts[0]
				newRole := parts[1]
				changeUserRole(username, newRole)
				bot.Send(tgbotapi.NewMessage(chatID, "–†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."))
			}
		}
	}
}

func sendEmail(to string, code string) {
	from := os.Getenv("SMTP_EMAIL")
	pass := os.Getenv("SMTP_PASS")
	host := "smtp.gmail.com"
	port := "587"

	auth := smtp.PlainAuth("", from, pass, host)
	msg := []byte("Subject: –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\r\n\r\n–í–∞—à –∫–æ–¥: " + code)
	err := smtp.SendMail(host+":"+port, auth, from, []string{to}, msg)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞:", err)
	}
}

func showMenuByRole(bot *tgbotapi.BotAPI, chatID int64, name, role string) {
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s (%s)", name, role))
	buttons := []tgbotapi.KeyboardButton{tgbotapi.NewKeyboardButton("–ö—É—Ä—Å—ã"), tgbotapi.NewKeyboardButton("–í—ã—Ö–æ–¥")}
	if role == "admin" {
		buttons = append(buttons, tgbotapi.NewKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å"), tgbotapi.NewKeyboardButton("–í—ã–¥–∞—Ç—å —Ä–æ–ª—å"))
	} else if role == "teacher" {
		buttons = append(buttons, tgbotapi.NewKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å"))
	}
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(tgbotapi.NewKeyboardButtonRow(buttons...))
	bot.Send(msg)
}

func registerOrGetUser(email string) SimpleUser {
	_ = godotenv.Load()

	if db.DB == nil {
		db.InitDB()
	}

	name := strings.Split(email, "@")[0]
	var user models.User
	err := db.DB.Where("email = ?", email).First(&user).Error

	if err != nil {
		// —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
		user = models.User{
			Name:     name,
			Email:    email,
			Password: "",
			Role:     "student",
		}
		if err := db.DB.Create(&user).Error; err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err)
		} else {
			log.Println("‚úÖ –ù–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", user.Email)

			// –ø—Ä–∏–≤—è–∑–∫–∞ –∫–æ –≤—Å–µ–º –∫—É—Ä—Å–∞–º
			var courses []models.Course
			if err := db.DB.Find(&courses).Error; err == nil {
				for _, course := range courses {
					enroll := models.Enrollment{
						UserID:   user.ID,
						CourseID: course.ID,
					}
					db.DB.Create(&enroll)
				}
				log.Printf("üìö –°—Ç—É–¥–µ–Ω—Ç %s –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ %d –∫—É—Ä—Å–æ–≤\n", user.Email, len(courses))
			}
		}
	} else {
		log.Println("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", user.Email)
	}

	return SimpleUser{
		ID:    user.ID,
		Name:  user.Name,
		Email: user.Email,
		Role:  user.Role,
	}
}

func changeUserRole(username string, role string) {
	payload := map[string]string{"username": username, "role": role}
	body, _ := json.Marshal(payload)
	http.Post("http://localhost:8080/update-role", "application/json", strings.NewReader(string(body)))
}

type SimpleUser struct {
	ID    uint   `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
	Role  string `json:"role"`
}

func fetchCourses() string {
	resp, err := http.Get("http://localhost:8080/courses")
	if err != nil {
		return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤"
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %d", resp.StatusCode)
	}

	var courses []struct {
		ID          uint   `json:"ID"`
		Title       string `json:"title"`
		Description string `json:"description"`
		TeacherID   uint   `json:"teacher_id"`
	}

	if err := json.NewDecoder(resp.Body).Decode(&courses); err != nil {
		return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞"
	}

	if len(courses) == 0 {
		return "–ö—É—Ä—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
	}

	var result strings.Builder
	result.WriteString(" –ö—É—Ä—Å—ã:\n\n")
	for _, c := range courses {
		result.WriteString(fmt.Sprintf("‚Ä¢ %s\n", c.Title))
	}
	return result.String()
}
