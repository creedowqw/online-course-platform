package bot

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

func StartBot() {
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if botToken == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN is not set")
	}

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:", err)
	}

	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @%s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, err := bot.GetUpdatesChan(u)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:", err)
	}

	for update := range updates {
		if update.Message == nil {
			continue
		}

		text := strings.ToLower(update.Message.Text)

		switch text {
		case "/start":
			reply := "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π /courses —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å—ã."
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, reply))

		case "/courses":
			msg := fetchCourses()
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, msg))

		default:
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π /start"))
		}
	}
}

func fetchCourses() string {
	resp, err := http.Get("http://app:8080/courses")
	if err != nil {
		return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API –∫—É—Ä—Å–æ–≤"
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Sprintf("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: %d", resp.StatusCode)
	}

	var courses []struct {
		ID          uint   `json:"ID"`
		Title       string `json:"title"`
		Description string `json:"description"`
		TeacherID   uint   `json:"teacher_id"`
	}

	if err := json.NewDecoder(resp.Body).Decode(&courses); err != nil {
		return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
	}

	if len(courses) == 0 {
		return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤."
	}

	var result strings.Builder
	result.WriteString("üìö –ö—É—Ä—Å—ã:\n\n")
	for _, c := range courses {
		result.WriteString(fmt.Sprintf("‚Ä¢ %s\n", c.Title))
	}
	return result.String()
}
